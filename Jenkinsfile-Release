/*
 * Copyright (c) 2020-present Sonatype, Inc. All rights reserved.
 *
 * This program is licensed to you under the Apache License Version 2.0,
 * and you may not use this file except in compliance with the Apache License Version 2.0.
 * You may obtain a copy of the Apache License Version 2.0 at http://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the Apache License Version 2.0 is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
 */
@Library(['private-pipeline-library', 'jenkins-shared', 'int-jenkins-shared']) _

final jira = [
    versionPrefix: '', project: 'INT', projectId: '12410',
    credentialId : 'jenkins-jira', autoRelease: true, failOnError: true
]

final jiraVersionMappings = [
  'nexus-iq-server':'helm-iq',
  'nexus-repository-manager':'helm-nxrm',
]

final chartLocation = [
  'nexus-iq-server': 'nexus-iq',
  'nexus-repository-manager': 'nexus-repository-manager',
]

properties([
  parameters([
    choice(
      choices: ['', 'nexus-iq-server', 'nexus-repository-manager'],
      name: 'chart',
      description: 'Chart to deploy.',
    ),
    string(
      name: 'chartVersion',
      description: 'Version of the Chart, like "139.0.0".',
    ),
    string(
      name: 'appVersion',
      description: 'Version of the application image, like "1.139.0"',
    ),
  ])
])

dockerizedBuildPipeline(
  prepare: {
    if (! params.chart) {
      error('Chart parameter is required.')
    }
    if (! params.chartVersion || ! params.appVersion) {
      error('Version parameters are required.')
    }
    githubStatusUpdate('pending')
  },
  buildAndTest: {
    final branch = gitBranch(env)
    runSafely 'git config user.email "sonatype-ci@sonatype.com"'
    runSafely 'git config user.name "Sonatype CI"'
    runSafely "git checkout ${branch}"
    runSafely "./upgrade.sh charts/${chartLocation[params.chart]} ${params.chartVersion} ${params.appVersion}"
    runSafely './build.sh'
    runSafely 'git add charts'
  },
  skipVulnerabilityScan: true,
  archiveArtifacts: 'docs/*',
  testResults: [],
  deployCondition: { true },
  deploy: {
    final branch = gitBranch(env)

    runSafely 'git add docs'
    runSafely "git commit -m 'Release Update for ${params.chartVersion}'"

    sshagent(credentials: [sonatypeZionCredentialsId()]) {
      runSafely 'git push'
    }
  },
  postDeploy: {
    // Verify Index.yaml
    String version = verifyIndexYamlAndTarFile(params.chart)

    // Set Jira Fix Version
    jira.versionPrefix = jiraVersionMappings[chart]
    jiraSetFixVersion(jira, version)

    // Create tags
    String tagName = "${chart}-${version}"
    runSafely "git tag -a ${tagName} -m 'Release Update: ${version}'"
    sshagent(credentials: [sonatypeZionCredentialsId()]) {
      runSafely "git push origin ${tagName}"
    }
  },
  onSuccess: {
    buildNotifications(currentBuild, env, 'main')
  },
  onFailure: {
    buildNotifications(currentBuild, env, 'main')
  }
)

String verifyIndexYamlAndTarFile(String chart) {
  // Get current version
  def indexFile = readYaml file: 'docs/index.yaml'
  String version = indexFile.entries[chart][0].version

  // Check tar file
  String repo_url = 'https://sonatype.github.io/helm3-charts/'
  verifyDownloadLinks(
    urlParts: [repo_url, chart, '-', version],
    urlSuffixes: ['.tgz'], retryCount: 2, retryDelay: 60
  )

  // Get repository version
  def response = httpRequest "${repo_url}/index.yaml"
  def repositoryIndexFile = readYaml text:response.content
  String repositoryVersion = repositoryIndexFile.entries[chart][0].version

  if (!version.equals(repositoryVersion)) {
    error "Released version: ${version} is different " + 
          "from helm repository version: ${repositoryVersion}"
  }
  
  return repositoryVersion
}
